{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, PLATFORM_ID, Directive, Inject, Optional, Input, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { create } from 'ladda';\n\nclass LaddaConfigArgs {}\n\nlet configAttributes = {\n  \"data-style\": \"style\",\n  \"data-spinner-size\": \"spinnerSize\",\n  \"data-spinner-color\": \"spinnerColor\",\n  \"data-spinner-lines\": \"spinnerLines\"\n};\n\nclass LaddaConfig {\n  constructor(config = {}) {\n    Object.assign(this, config);\n  }\n\n}\n\nLaddaConfig.ɵfac = function LaddaConfig_Factory(t) {\n  return new (t || LaddaConfig)(i0.ɵɵinject(LaddaConfigArgs));\n};\n\nLaddaConfig.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: LaddaConfig,\n  factory: LaddaConfig.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LaddaConfig, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: LaddaConfigArgs\n    }];\n  }, null);\n})();\n\nclass LaddaDirective {\n  constructor(el, config, platformId) {\n    this.platformId = platformId;\n    this.ladda = undefined;\n    this.disabled = false;\n    this.el = el.nativeElement;\n\n    if (!config) {\n      return;\n    } // apply default styles if they aren't overwritten by an attribute\n\n\n    for (let attribute in configAttributes) {\n      let configValue = config[configAttributes[attribute]];\n\n      if (!configValue) {\n        continue; // don't waste time reading the attribute\n      }\n\n      if (!this.el.getAttribute(attribute)) {\n        // attribute isn't set - apply the default config value\n        let value = typeof configValue === \"number\" ? configValue.toString() : configValue;\n        this.el.setAttribute(attribute, value);\n      }\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (!this.ladda) {\n      return; // needed since ngOnChanges is called before ngOnInit\n    }\n\n    if (changes.loading) {\n      this.updateLadda(changes.loading.previousValue);\n    }\n\n    if (changes.disabled) {\n      this.updateDisabled();\n    }\n  }\n\n  ngOnInit() {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    this.ladda = create(this.el); // if the initial loading value isn't false, a timeout of 0 ms\n    // is necessary for the calculated spinner size to be correct.\n\n    setTimeout(() => {\n      this.updateLadda(false);\n    }, 0);\n  }\n\n  ngOnDestroy() {\n    if (this.ladda) {\n      this.ladda.remove();\n    }\n  }\n\n  updateLadda(previousValue) {\n    if (!this.ladda) {\n      return;\n    }\n\n    let loading = typeof this.loading === 'number' || !!this.loading;\n    let wasLoading = typeof previousValue === 'number' || !!previousValue;\n\n    if (!loading) {\n      if (wasLoading) {\n        this.ladda.stop();\n      }\n\n      return this.updateDisabled();\n    }\n\n    if (!wasLoading) {\n      this.ladda.start();\n    }\n\n    if (typeof this.loading === 'number') {\n      this.ladda.setProgress(this.loading);\n    }\n  }\n\n  updateDisabled() {\n    this.el.disabled = this.disabled;\n  }\n\n}\n\nLaddaDirective.ɵfac = function LaddaDirective_Factory(t) {\n  return new (t || LaddaDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LaddaConfig, 8), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nLaddaDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: LaddaDirective,\n  selectors: [[\"\", \"ladda\", \"\"]],\n  inputs: {\n    loading: [\"ladda\", \"loading\"],\n    disabled: \"disabled\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LaddaDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ladda]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: LaddaConfigArgs,\n      decorators: [{\n        type: Inject,\n        args: [LaddaConfig]\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    loading: [{\n      type: Input,\n      args: ['ladda']\n    }],\n    disabled: [{\n      type: Input\n    }]\n  });\n})();\n\nclass LaddaModule {\n  static forRoot(config) {\n    return {\n      ngModule: LaddaModule,\n      providers: [{\n        provide: LaddaConfig,\n        useValue: config\n      }]\n    };\n  }\n\n}\n\nLaddaModule.ɵfac = function LaddaModule_Factory(t) {\n  return new (t || LaddaModule)();\n};\n\nLaddaModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: LaddaModule\n});\nLaddaModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LaddaModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [LaddaDirective],\n      exports: [LaddaDirective]\n    }]\n  }], null, null);\n})();\n/*\r\n * Public API Surface of ladda\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { LaddaConfig, LaddaConfigArgs, LaddaDirective, LaddaModule, configAttributes }; //# sourceMappingURL=angular2-ladda.mjs.map","map":null,"metadata":{},"sourceType":"module"}